name: Build Scanner Image

on:
  workflow_run:
    workflows: ["Build Docker Image"]
    types:
      - completed
  workflow_dispatch:  # Manual trigger (will always use latest)
  push:
    paths:
      - 'container-static-code-scan/**'

permissions:
  actions: read
  contents: read

jobs:
  BuildScannerImage:
    if: |
      github.event_name != 'workflow_run' || 
      github.event.workflow_run.conclusion == 'success'
    runs-on: codebuild-code-scanner-4codebuild-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - name: Get Latest Scanner Version
        uses: actions/github-script@v7
        id: get-scanner-version
        with:
          script: |
            let version;
            
            if (context.eventName === 'workflow_run') {
              // For workflow_run triggers, get version from the triggering workflow
              version = context.payload.workflow_run.outputs?.scanner_image_version;
              core.info(`Workflow run version: ${version}`);
            } else {
              // For other triggers, get from latest successful infra workflow
              const infraWorkflows = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'deploy-infra.yml',
                status: 'success',
                per_page: 1
              });
              if (infraWorkflows.data.workflow_runs.length === 0) {
                core.setFailed('No successful infrastructure workflow runs found');
                return;
              }
              version = infraWorkflows.data.workflow_runs[0].outputs?.scanner_image_version;
              core.info(`Infrastructure workflow version: ${version}`);
              core.info('Full workflow data:', JSON.stringify(infraWorkflows.data.workflow_runs[0], null, 2));
            }

            if (!version) {
              core.setFailed('Scanner version not found in workflow outputs');
              return;
            }
            core.info(`Setting version output to: ${version}`);
            core.setOutput('version', version);

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check Existing Image
        id: check_image
        run: |
          # Get version from workflow check
          VERSION=${{ steps.get-scanner-version.outputs.version }}
          
          # Get the short commit SHA
          SHORT_SHA=${GITHUB_SHA:0:7}
          IMAGE_TAG="${VERSION}-${SHORT_SHA}"
          
          # Check if image with this tag exists
          if aws ecr describe-images \
            --repository-name code-scanner-4codebuild-repo \
            --image-ids imageTag=$IMAGE_TAG 2>/dev/null; then
            echo "Image with tag $IMAGE_TAG already exists, skipping build"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist, proceeding with build"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Scanner Image
        if: steps.check_image.outputs.skip != 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: code-scanner-4codebuild-repo
          BASE_ECR_REPO: docker-image-4codebuild-repo
          VERSION: ${{ steps.get-scanner-version.outputs.version }}
          COMMIT_HASH: ${{ github.sha }}
        run: |
          IMAGE_TAG="${VERSION}-${COMMIT_HASH:0:7}"
          
          # Build using base image from previous workflow
          docker build \
            --build-arg ECR_REPO_URL=$ECR_REGISTRY/$BASE_ECR_REPO \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f container-static-code-scan/Dockerfile .
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest 