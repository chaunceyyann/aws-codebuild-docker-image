name: 'Fleet Control'

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Fleet control action to perform'
        required: true
        default: 'status'
        type: choice
        options:
          - status
          - start
          - stop
          - monitor
          - init
          - switch_to_fleet
          - switch_to_ondemand
          - scheduled_control
          - enable_scheduler
          - disable_scheduler
      target_capacity:
        description: 'Target capacity for start action'
        required: false
        default: '2'
        type: string
      project_names:
        description: 'Comma-separated list of CodeBuild project names (for switch actions)'
        required: false
        default: ''
        type: string
      schedule_type:
        description: 'Schedule type for scheduled_control'
        required: false
        default: 'business_hours'
        type: choice
        options:
          - business_hours
          - weekend
          - custom
          - smart
      aws_region:
        description: 'AWS region'
        required: false
        default: 'us-east-1'
        type: string

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  fleet-control:
    name: 'Fleet Control'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install dependencies'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: 'Run fleet control action'
        id: fleet-control
        uses: ./.github/actions/fleet-control
        with:
          action: ${{ github.event.inputs.action }}
          target_capacity: ${{ github.event.inputs.target_capacity }}
          project_names: ${{ github.event.inputs.project_names }}
          schedule_type: ${{ github.event.inputs.schedule_type }}
          aws_region: ${{ github.event.inputs.aws_region }}

      - name: 'Display action summary'
        if: always()
        run: |
          echo "## Fleet Control Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Capacity:** ${{ github.event.inputs.target_capacity }}" >> $GITHUB_STEP_SUMMARY
          echo "**AWS Region:** ${{ github.event.inputs.aws_region }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ github.event.inputs.project_names }}" ]; then
            echo "**Project Names:** ${{ github.event.inputs.project_names }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ github.event.inputs.action }}" = "scheduled_control" ]; then
            echo "**Schedule Type:** ${{ github.event.inputs.schedule_type }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

                    # Display Lambda function output if available
          if [ -f "/tmp/fleet_response.json" ]; then
            echo "## 📊 Lambda Response Details" >> $GITHUB_STEP_SUMMARY

            # Extract the body from the Lambda response and format it
            response_body=$(cat /tmp/fleet_response.json | jq -r '.body' 2>/dev/null)

            if [ -n "$response_body" ]; then
              # Try to parse as JSON and format nicely
              if echo "$response_body" | jq . >/dev/null 2>&1; then
                echo "### 🔍 Full Response" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```json' >> $GITHUB_STEP_SUMMARY
                echo "$response_body" | jq . >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY

                # Extract key information for quick summary
                echo "### 📋 Quick Summary" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY

                # Extract message if available
                message=$(echo "$response_body" | jq -r '.message // empty' 2>/dev/null)
                if [ -n "$message" ]; then
                  echo "**💬 Message:** $message" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi

                # Extract fleet information if available
                fleet_name=$(echo "$response_body" | jq -r '.fleet.fleet_name // empty' 2>/dev/null)
                if [ -n "$fleet_name" ]; then
                  echo "**🚀 Fleet Details:**" >> $GITHUB_STEP_SUMMARY
                  echo "- **Name:** \`$fleet_name\`" >> $GITHUB_STEP_SUMMARY
                  base_capacity=$(echo "$response_body" | jq -r '.fleet.base_capacity // empty' 2>/dev/null)
                  if [ -n "$base_capacity" ]; then
                    echo "- **Base Capacity:** \`$base_capacity\`" >> $GITHUB_STEP_SUMMARY
                  fi
                  fleet_status=$(echo "$response_body" | jq -r '.fleet.status.statusCode // empty' 2>/dev/null)
                  if [ -n "$fleet_status" ]; then
                    echo "- **Status:** \`$fleet_status\`" >> $GITHUB_STEP_SUMMARY
                  fi
                  compute_type=$(echo "$response_body" | jq -r '.fleet.compute_type // empty' 2>/dev/null)
                  if [ -n "$compute_type" ]; then
                    echo "- **Compute Type:** \`$compute_type\`" >> $GITHUB_STEP_SUMMARY
                  fi
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi

                # Extract project information if available
                total_projects=$(echo "$response_body" | jq -r '.summary.total_github_projects // empty' 2>/dev/null)
                if [ -n "$total_projects" ]; then
                  echo "**📁 Project Summary:**" >> $GITHUB_STEP_SUMMARY
                  echo "- **Total Projects:** \`$total_projects\`" >> $GITHUB_STEP_SUMMARY
                  fleet_projects=$(echo "$response_body" | jq -r '.summary.projects_using_fleet // empty' 2>/dev/null)
                  if [ -n "$fleet_projects" ]; then
                    echo "- **Using Fleet:** \`$fleet_projects\`" >> $GITHUB_STEP_SUMMARY
                  fi
                  ondemand_projects=$(echo "$response_body" | jq -r '.summary.projects_using_ondemand // empty' 2>/dev/null)
                  if [ -n "$ondemand_projects" ]; then
                    echo "- **Using On-Demand:** \`$ondemand_projects\`" >> $GITHUB_STEP_SUMMARY
                  fi
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi

                # Extract target capacity if available
                target_capacity=$(echo "$response_body" | jq -r '.target_capacity // empty' 2>/dev/null)
                if [ -n "$target_capacity" ]; then
                  echo "**🎯 Target Capacity:** \`$target_capacity\`" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi

                # Extract scheduler status if available
                scheduler_enabled=$(echo "$response_body" | jq -r '.scheduler_enabled // empty' 2>/dev/null)
                if [ -n "$scheduler_enabled" ]; then
                  echo "**⏰ Scheduler Status:** \`Enabled: $scheduler_enabled\`" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi
                scheduler_disabled=$(echo "$response_body" | jq -r '.scheduler_disabled // empty' 2>/dev/null)
                if [ -n "$scheduler_disabled" ]; then
                  echo "**⏰ Scheduler Status:** \`Disabled: $scheduler_disabled\`" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi

                # Extract updated projects if available
                updated_projects=$(echo "$response_body" | jq -r '.projects_switched // empty' 2>/dev/null)
                if [ -n "$updated_projects" ] && [ "$updated_projects" != "null" ]; then
                  echo "**🔄 Updated Projects:**" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "$updated_projects" | jq -r 'join("\n")' >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi

                # Show individual projects if available
                github_projects=$(echo "$response_body" | jq -r '.github_projects // empty' 2>/dev/null)
                if [ -n "$github_projects" ] && [ "$github_projects" != "null" ]; then
                  echo "### 📋 Individual Projects" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo '```json' >> $GITHUB_STEP_SUMMARY
                  echo "$github_projects" | jq . >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi

              else
                # If not valid JSON, show as plain text
                echo "### 📝 Response (Plain Text)" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "$response_body" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            else
              # Fallback to raw response
              echo "### 🔧 Raw Response" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              cat /tmp/fleet_response.json >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi
