name: Build Docker Image

on:
  workflow_run:
    workflows: ["Deploy AWS Infrastructure"]
    types:
      - completed
  schedule:
    - cron: '*/10 * * * *'  # Run every 10 minutes

permissions:
  actions: read    # Add permissions to read workflow runs

jobs:
  BuildDockerImage:
    runs-on: ubuntu-latest
    steps:
      - name: Check Infrastructure Workflow Status
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        id: check-workflow
        with:
          script: |
            const workflows = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-infra.yml',
              per_page: 1
            });
            if (workflows.data.workflow_runs.length === 0) {
              core.setFailed('No infrastructure workflow runs found');
              return;
            }
            const lastRun = workflows.data.workflow_runs[0];
            if (lastRun.conclusion !== 'success') {
              core.setFailed('Last infrastructure deployment was not successful');
              return;
            }

      - name: Check Workflow Trigger
        if: github.event_name == 'workflow_run'
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "Infrastructure workflow did not succeed"
            exit 1
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Test Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-image-4codebuild-repo
          VERSION: "1.0.0"
          COMMIT_HASH: ${{ github.sha }}
        run: |
          # Create image tag using version and commit hash
          IMAGE_TAG="${VERSION}-${COMMIT_HASH:0:7}"
          
          # Remove the latest tag if it exists
          aws ecr batch-delete-image \
            --repository-name $ECR_REPOSITORY \
            --image-ids imageTag=latest \
            || true  # Don't fail if tag doesn't exist
          
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                      -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push the Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest 