name: Build Docker Image

on:
  workflow_run:
    workflows: ["Deploy AWS Infrastructure"]
    types:
      - completed
  schedule:
    - cron: '0 * * * *'  # Run once every hour at minute 0

permissions:
  actions: read    # Add permissions to read workflow runs
  contents: read   # Add permissions to read repository contents

jobs:
  BuildDockerImage:
    runs-on: ubuntu-latest
    steps:
      - name: Get Base Image Version
        uses: actions/github-script@v7
        id: get-version
        with:
          script: |
            let version;
            
            if (context.eventName === 'workflow_run') {
              // For workflow_run triggers, get version directly from the triggering workflow
              version = context.payload.workflow_run.outputs?.base_image_version;
              core.info(`[INFO] Retrieved base image version from workflow_run: ${version}`);
            } else {
              // For scheduled runs, get version from latest successful infra workflow
              const workflows = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'deploy-infra.yml',
                status: 'success',
                per_page: 1
              });
              
              if (workflows.data.workflow_runs.length === 0) {
                core.setFailed('[ERROR] No successful infrastructure workflow runs found');
                return;
              }
              
              version = workflows.data.workflow_runs[0].outputs?.base_image_version;
              core.info(`[INFO] Retrieved base image version from latest infra workflow: ${version}`);
            }
            
            if (!version) {
              core.setFailed('[ERROR] Base image version not found in workflow outputs');
              return;
            }
            
            core.info(`Using version: ${version}`);
            core.setOutput('version', version);

      - name: Check Workflow Trigger
        if: github.event_name == 'workflow_run'
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "Infrastructure workflow did not succeed"
            exit 1
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check Existing Image
        id: check_image
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          
          # Get the short commit SHA
          SHORT_SHA=${GITHUB_SHA:0:7}
          IMAGE_TAG="${VERSION}-${SHORT_SHA}"
          
          # Check if image with this tag exists
          if aws ecr describe-images \
            --repository-name docker-image-4codebuild-repo \
            --image-ids imageTag=$IMAGE_TAG 2>/dev/null; then
            echo "Image with tag $IMAGE_TAG already exists, skipping build"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist, proceeding with build"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
          # Add this line to set the version output
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and Test Docker Image
        if: steps.check_image.outputs.skip != 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-image-4codebuild-repo
          VERSION: ${{ steps.check_image.outputs.version }}
          COMMIT_HASH: ${{ github.sha }}
        run: |
          # Create image tag using version and commit hash
          IMAGE_TAG="${VERSION}-${COMMIT_HASH:0:7}"
          
          # Remove the latest tag if it exists
          aws ecr batch-delete-image \
            --repository-name $ECR_REPOSITORY \
            --image-ids imageTag=latest \
            || true  # Don't fail if tag doesn't exist
          
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                      -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push the Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest 