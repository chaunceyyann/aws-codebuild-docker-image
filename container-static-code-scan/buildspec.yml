version: 0.2

env:
  variables:
    ECR_REGISTRY: ${ECR_REGISTRY}
    ECR_REPOSITORY: ${ECR_REPOSITORY}  # This will be code-scanner-4codebuild-repo
    VERSION: ${VERSION}

phases:
  pre_build:
    commands:
      # Log in to ECR
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=$VERSION-$COMMIT_HASH
      - echo "Version is set to $VERSION"
      - echo "Commit hash is $COMMIT_HASH"
      - echo "Image tag will be $IMAGE_TAG"
  build:
    commands:
      # Build the Docker image
      - echo Build started on `date`
      - echo Building the Scanner Docker image...
      - docker build -f container-static-code-scan/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      - echo Tagging image with latest...
      - docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
      # Run vulnerability scans
      - echo Running Grype vulnerability scan...
      - grype $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --fail-on high
      - echo Running Trivy vulnerability scan...
      - trivy image --exit-code 1 --severity HIGH,CRITICAL $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  post_build:
    commands:
      # Push the image to ECR
      - echo Build completed on `date`
      - echo Pushing the Scanner Docker image to ECR...
      - echo "Deleted existing 'latest' tag."
      - aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageTag=latest || true
      - docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' "$ECR_REPOSITORY" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > imagedefinitions.json

# No artifacts produced (image is pushed to ECR)
artifacts:
  files: imagedefinitions.json
  discard-paths: yes
