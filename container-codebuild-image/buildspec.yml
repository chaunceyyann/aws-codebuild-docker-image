version: 0.2

env:
  variables:
    ECR_REGISTRY: ${ECR_REGISTRY}
    ECR_REPOSITORY: ${ECR_REPOSITORY}
    VERSION: ${VERSION}

phases:
  pre_build:
    commands:
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=$VERSION-$COMMIT_HASH
      - echo "Version is set to $VERSION"
      - echo "Commit hash is $COMMIT_HASH"
      - echo "Image tag will be $IMAGE_TAG"
      # Check if the tag already exists before doing anything else
      - |
        if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG --region $AWS_DEFAULT_REGION | grep -q '"imageTag":'; then
          echo "Image tag $IMAGE_TAG already exists in $ECR_REPOSITORY. Skipping build and push."
          exit 0
        fi
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -f container-codebuild-image/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      - echo Tagging image with latest...
      - docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image to ECR...
      - docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - echo "Successfully pushed versioned image. Now updating latest tag..."
      - |
        # Only delete the old 'latest' tag after successfully pushing the new versioned image
        if aws ecr list-images --repository-name $ECR_REPOSITORY --filter tagStatus=TAGGED --query 'imageIds[?imageTag==`latest`]' --output json | grep -q "latest"; then
          echo "Found existing 'latest' tag. Deleting it before pushing new latest image..."
          IMAGE_DIGEST=$(aws ecr list-images --repository-name $ECR_REPOSITORY --filter tagStatus=TAGGED --query 'imageIds[?imageTag==`latest`].imageDigest' --output text)
          aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$IMAGE_DIGEST
          echo "Deleted existing 'latest' tag."
        else
          echo "No existing 'latest' tag found. Proceeding with latest push."
        fi
      - docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - echo "Successfully pushed latest image."
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' "$ECR_REPOSITORY" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > imagedefinitions.json
artifacts:
  files: imagedefinitions.json
